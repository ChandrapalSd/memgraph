#>cpp
#pragma once

#include "communication/rpc/messages.hpp"
#include "query/frontend/ast/ast.hpp"
#include "query/frontend/semantic/symbol_table.hpp"
#include "query/distributed/plan/ops.hpp"
cpp<#

(lcp:namespace distributed)

(defun slk-save-plan (member)
  #>cpp
  query::plan::LogicalOperator::SaveHelper helper;
  slk::Save<query::plan::LogicalOperator>(
      self.${member}, builder, &helper.saved_ops,
      [&helper](const auto &val, auto *builder) {
        slk::Save(val, builder, &helper);
      });
  cpp<#)

(defun slk-load-plan (member)
  #>cpp
  query::plan::LogicalOperator::SlkLoadHelper helper;
  slk::Load<query::plan::LogicalOperator>(&self->${member}, reader, &helper.loaded_ops,
      [&helper](auto *op, auto *reader) {
        slk::ConstructAndLoad(op, reader, &helper);
      });
  self->storage = std::move(helper.ast_storage);
  cpp<#)

(lcp:define-rpc dispatch-plan
    (:request
     ((plan-id :int64_t)
      (plan "std::shared_ptr<query::plan::LogicalOperator>"
            :slk-save #'slk-save-plan
            :slk-load #'slk-load-plan)
      (symbol-table "query::SymbolTable")
      (storage "query::AstStorage" :initarg nil :dont-save t)))
  (:response ()))

(lcp:define-rpc remove-plan
    (:request ((member :int64_t)))
  (:response ()))

(lcp:pop-namespace) ;; distributed
