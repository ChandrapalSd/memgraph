#>cpp
#pragma once

#include <memory>
#include <string>

#include "communication/rpc/messages.hpp"
#include "distributed/data_rpc_messages.capnp.h"
#include "storage/distributed/edge.hpp"
#include "storage/distributed/gid.hpp"
#include "storage/distributed/rpc/serialization.hpp"
#include "storage/distributed/vertex.hpp"
#include "transactions/type.hpp"
cpp<#

(lcp:namespace distributed)

(lcp:capnp-namespace "distributed")

(lcp:capnp-import 'utils "/rpc/serialization.capnp")
(lcp:capnp-import 'storage "/storage/distributed/rpc/serialization.capnp")

(lcp:define-struct tx-gid-pair ()
  ((tx-id "tx::TransactionId" :capnp-type "UInt64")
   (gid "gid::Gid" :capnp-type "UInt64"))
  (:serialize (:slk) (:capnp)))

(lcp:define-rpc vertex
    (:request ((member "TxGidPair")))
  (:response
   ((cypher-id :int64_t)
    (vertex-input "const Vertex *"
                  :capnp-type "Storage.Vertex"
                  :capnp-save
                  (lambda (builder member capnp-name)
                    (declare (ignore capnp-name))
                    #>cpp
                    storage::SaveVertex(*${member}, &${builder}, self.worker_id);
                    cpp<#)
                  :slk-save
                  (lambda (member)
                    #>cpp
                    slk::Save(*self.${member}, builder, self.worker_id);
                    cpp<#)
                  :capnp-load
                  (lambda (reader member capnp-name)
                    (declare (ignore member capnp-name))
                    #>cpp
                    self->vertex_output = storage::LoadVertex(${reader});
                    cpp<#)
                  :slk-load
                  (lambda (member)
                    (declare (ignore member))
                    #>cpp
                    self->vertex_output = std::make_unique<Vertex>();
                    slk::Load(self->vertex_output.get(), reader);
                    cpp<#))
    (worker-id :int64_t :dont-save t)
    (vertex-output "std::unique_ptr<Vertex>" :initarg nil :dont-save t))))

(lcp:define-rpc edge
    (:request ((member "TxGidPair")))
  (:response
   ((cypher-id :int64_t)
    (edge-input "const Edge *"
                :capnp-type "Storage.Edge"
                :capnp-save
                (lambda (builder member capnp-name)
                  (declare (ignore capnp-name))
                  #>cpp
                  storage::SaveEdge(*${member}, &${builder}, self.worker_id);
                  cpp<#)
                :slk-save
                (lambda (member)
                  #>cpp
                  slk::Save(*self.${member}, builder, self.worker_id);
                  cpp<#)
                :capnp-load
                (lambda (reader member capnp-name)
                  (declare (ignore member capnp-name))
                  #>cpp
                  self->edge_output = storage::LoadEdge(${reader});
                  cpp<#)
                :slk-load
                (lambda (member)
                  #>cpp
                  slk::Load(&self->edge_output, reader);
                  cpp<#))
    (worker-id :int64_t :dont-save t)
    (edge-output "std::unique_ptr<Edge>" :initarg nil :dont-save t))))

(lcp:define-rpc vertex-count
    (:request ((member "tx::TransactionId" :capnp-type "UInt64")))
  (:response ((member :int64_t))))

(lcp:pop-namespace) ;; distributed
