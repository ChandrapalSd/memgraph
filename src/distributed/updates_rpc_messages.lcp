#>cpp
#pragma once

#include <unordered_map>

#include "communication/rpc/messages.hpp"
#include "database/distributed/serialization.hpp"
#include "durability/distributed/state_delta.hpp"
#include "storage/distributed/address_types.hpp"
#include "storage/distributed/gid.hpp"
#include "storage/distributed/rpc/serialization.hpp"
#include "transactions/type.hpp"
cpp<#

(lcp:namespace distributed)

(lcp:define-enum update-result
  (done
   serialization-error
   lock-timeout-error
   update-deleted-error
   unable-to-delete-vertex-error)
  (:documentation "The result of sending or applying a deferred update to a worker.")
  (:serialize))

(lcp:define-rpc update
    (:request ((member "::database::StateDelta")
               (worker-id :int64_t)))
  (:response ((member "UpdateResult"))))

(lcp:define-rpc update-apply
    (:request ((member "::tx::TransactionId")))
  (:response ((member "UpdateResult"))))

(lcp:define-struct create-result ()
  ((result "UpdateResult")
   (cypher-id :int64_t :documentation "Only valid if creation was successful.")
   (gid "::gid::Gid" :documentation "Only valid if creation was successful."))
  (:serialize (:slk)))

(lcp:define-struct create-vertex-req-data ()
  ((tx-id "::tx::TransactionId")
   (labels "std::vector<storage::Label>")
   (properties "std::unordered_map<storage::Property, PropertyValue>")
   (cypher-id "std::optional<int64_t>"))
  (:serialize (:slk)))

(lcp:define-rpc create-vertex
    (:request ((member "CreateVertexReqData")))
  (:response ((member "CreateResult"))))

(lcp:define-struct create-edge-req-data ()
  ((worker-id :int64_t)
   (from "::gid::Gid")
   (to "::storage::VertexAddress")
   (edge-type "::storage::EdgeType")
   (tx-id "::tx::TransactionId")
   (cypher-id "std::optional<int64_t>"))
  (:serialize (:slk)))

(lcp:define-rpc create-edge
    (:request ((member "CreateEdgeReqData")))
  (:response ((member "CreateResult"))))

(lcp:define-struct add-in-edge-req-data ()
  ((worker-id :int64_t)
   (from "::storage::VertexAddress")
   (edge-address "::storage::EdgeAddress")
   (to "::gid::Gid")
   (edge-type "::storage::EdgeType")
   (tx-id "::tx::TransactionId"))
  (:serialize (:slk)))

(lcp:define-rpc add-in-edge
    (:request ((member "AddInEdgeReqData")))
  (:response ((member "UpdateResult"))))

(lcp:define-struct remove-vertex-req-data ()
  ((worker-id :int64_t)
   (gid "::gid::Gid")
   (tx-id "::tx::TransactionId")
   (check-empty :bool))
  (:serialize (:slk)))

(lcp:define-rpc remove-vertex
    (:request ((member "RemoveVertexReqData")))
  (:response ((member "UpdateResult"))))

(lcp:define-struct remove-edge-data ()
  ((worker-id :int64_t)
   (tx-id "::tx::TransactionId")
   (edge-id "::gid::Gid")
   (vertex-from-id "::gid::Gid")
   (vertex-to-address "::storage::VertexAddress"))
  (:serialize (:slk)))

(lcp:define-rpc remove-edge
    (:request ((member "RemoveEdgeData")))
  (:response ((member "UpdateResult"))))

(lcp:define-struct remove-in-edge-data ()
  ((worker-id :int64_t)
   (tx-id "::tx::TransactionId")
   (vertex "::gid::Gid")
   (edge-address "::storage::EdgeAddress"))
  (:serialize (:slk)))

(lcp:define-rpc remove-in-edge
    (:request ((member "RemoveInEdgeData")))
  (:response ((member "UpdateResult"))))

(lcp:define-struct created-info ()
  ((cypher-id "int64_t")
   (gid "::gid::Gid"))
  (:public #>cpp
    CreatedInfo(int64_t cypher_id, gid::Gid gid)
        : cypher_id(cypher_id), gid(gid) {}
  cpp<#))

(lcp:define-struct created-vertex-info ()
  ((cypher-id "int64_t")
   (gid "::gid::Gid"))
  (:public #>cpp
    CreatedVertexInfo(int64_t cypher_id, gid::Gid gid)
        : cypher_id(cypher_id), gid(gid) {}
  cpp<#))

(lcp:define-struct created-edge-info ()
  ((cypher-id "int64_t")
   (edge-address "::storage::EdgeAddress"))
  (:public #>cpp
    CreatedEdgeInfo(int64_t cypher_id, storage::EdgeAddress edge_address)
        : cypher_id(cypher_id), edge_address(edge_address) {}
  cpp<#))

(lcp:pop-namespace) ;; distributed
